generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  cedula       String   @id
  name         String
  phone        String
  password     String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  pushToken    String?

  // Campos opcionales para completar el perfil
  email        String?  @unique
  address      String?
  photoUrl     String?
  cedulaUrl    String?
  licenseUrl   String?
  vehiclePhotoUrl String?
  vehicleBrand String?
  vehicleModel String?

  // Relaciones
  rides        Ride[]   @relation("ClientRides")
  ridesDriven  Ride[]   @relation("DriverRides")
  credit       Credit?
  payments     Payment[]
  reports      Report[]
  ratingsGiven Rating[] @relation("UserRatings")
  ratingsReceived Rating[] @relation("DriverRatings")
}

model Ride {
  id               Int      @id @default(autoincrement())

  // üìç Origen: direcci√≥n + coordenadas opcionales
  origin           String
  originLat        Float?
  originLng        Float?

  // üéØ Destino: direcci√≥n + coordenadas opcionales
  destination      String
  destinationLat   Float?
  destinationLng   Float?

  // üìÖ Agendamiento opcional
  scheduled        Boolean
  scheduledAt      DateTime?

  // üìÖ Opci√≥n de viaje
  travelOption     TravelOption
  note             String?

  // üïí Tiempos del viaje
  requestedAt      DateTime   @default(now())
  assignedAt       DateTime?
  completedAt      DateTime?

  // üìå Estado del viaje
  status           RideStatus @default(PENDING)

  // üë§ Cliente que solicita el viaje
  client           User       @relation("ClientRides", fields: [clientCedula], references: [cedula])
  clientCedula     String

  // üöô Conductor asignado (opcional al inicio)
  driver           User?      @relation("DriverRides", fields: [driverCedula], references: [cedula])
  driverCedula     String?

  // üó£Ô∏è Feedback del cliente
  feedback         String?

  // üí∞ M√©todo de pago y tarifa
  paymentMethod    PaymentMethod
  fare             Float?

  // ‚úÖ Confirmaci√≥n de asignaci√≥n
  confirmationSent Boolean    @default(false)
}




model Credit {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userCedula], references: [cedula])
  userCedula   String   @unique
  limit        Float    @default(10.0)
  available    Float
  createdAt    DateTime @default(now())
  payments     Payment[]
}

model Payment {
  id           Int      @id @default(autoincrement())
  credit       Credit?  @relation(fields: [creditId], references: [id])
  creditId     Int?
  user         User     @relation(fields: [userCedula], references: [cedula])
  userCedula   String
  amount       Float
  paidAt       DateTime @default(now())
}

model AdminLog {
  id           Int      @id @default(autoincrement())
  action       String
  target       String
  timestamp    DateTime @default(now())
}

model Report {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userCedula], references: [cedula])
  userCedula   String
  description  String
  status       ReportStatus @default(PENDING)
  createdAt    DateTime @default(now())
}

model Rating {
  id           Int      @id @default(autoincrement())
  user         User     @relation("UserRatings", fields: [userCedula], references: [cedula])
  userCedula   String
  driver       User     @relation("DriverRatings", fields: [driverCedula], references: [cedula])
  driverCedula String
  score        Int      // 1‚Äì5
  comment      String?
  createdAt    DateTime @default(now())
}

enum Role {
  CLIENT
  DRIVER
  ADMIN
}

enum RideStatus {
  PENDING
  ASSIGNED
  COMPLETED
  CANCELLED
}

enum TravelOption {
  ONE_WAY
  ROUND_TRIP
}

enum PaymentMethod {
  CASH
  PAGO_MOVIL
  CREDITS
}

enum ReportStatus {
  PENDING
  RESOLVED
  CLOSED
}
